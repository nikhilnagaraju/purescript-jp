"use strict";
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");

// | The `Field` class is for types that are commutative fields.

// |

// | Instances must satisfy the following law in addition to the

// | `EuclideanRing` laws:

// |

// | - Non-zero multiplicative inverse: ``a `mod` b = zero`` for all `a` and `b`

// |

// | The `Unit` instance is provided for backwards compatibility, but it is

// | not law-abiding, because `Unit` does not obey the `EuclideanRing` laws.

// | This instance will be removed in a future release.
var Field = function (EuclideanRing0) {
    this.EuclideanRing0 = EuclideanRing0;
};
var fieldNumber = new Field(function () {
    return Data_EuclideanRing.euclideanRingNumber;
});
module.exports = {
    Field: Field, 
    fieldNumber: fieldNumber
};
